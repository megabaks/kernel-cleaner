#!/bin/bash
# Copyright megabaks
# Distributed under the terms of the GNU General Public License v3 or later
MY_VERSION='devel ---> 2014-02-04'
############################################################################
################ portage functions #########################################
PYTHON_VERSION="python$(python --version 2>&1 | grep -oE '[0-9]\.[0-9]')"
PORTAGE_BIN_PATH="/usr/lib/portage/$PYTHON_VERSION/"
source ${PORTAGE_BIN_PATH}/isolated-functions.sh
############################################################################
################ colors ####################################################
green="\033[01;32m"
red="\033[01;31m"
restore="\033[00m"
contrast="\033[1m"
############################################################################
################ check /boot ###############################################
if grep " /boot " /etc/fstab | grep -qv \#;then
	if ! `grep -q " /boot " /proc/mounts`;then
		echo -e "\n${green}/boot${restore} ${red}is NOT mounted${restore}!!!\n"
		exit 1
	fi
fi
############################################################################
################ config ####################################################
CONFIG="${CONFIG:-/etc/kernel-cleaner.conf}"
[[ -f "${CONFIG}" ]] && . "${CONFIG}"
############################################################################
################ ignore/force workaround ###################################
IGNORE="${IGNORE} "
FULL_IGNORE="$IGNORE unknown"
FULL_IGNORE+=" $(sed -e "s|.*--ignore ||" -e "s| --.*||" -e "s| -.*||"<<< `echo "${*}" | grep '\--ignore' `)"
FULL_IGNORE="$(echo ${FULL_IGNORE} | tr " " "\n" | uniq | tr "\n" " ")"
FORCE+=" $(sed -e "s|.*--force ||" -e "s| --.*||" -e "s| -.*||" <<< `echo "${*}" | grep '\--force' `)"
############################################################################
################ init ######################################################
init(){
	threads="$(( `grep -c "^processor" /proc/cpuinfo` + 1 ))"

	SRC="/usr/src/linux"
	PKGDB="/var/db/pkg"

	echo "Kernels....";
	KERNELS="$(parallel -j${threads} "file -k" ::: /boot/* 2>/dev/null | sed 'N;s/:\n//' | grep "Linux.*version" |\
			grep -oe "/boot/.*: " -oe "version .*" | sed -e 'N;s/\n//' -e 's|:||1'| awk '{print $1,$3}')" ; eend 0 2>/dev/null
	echo "Initrams...";
	INITRAMS="$(parallel -j${threads} "file -F ' '" ::: /boot/* 2>/dev/null | awk '/compressed data/ {print $1,$2}')" ; eend 0 2>/dev/null
	echo "Configs....";
	parallel -j${threads} "file -F ' '" ::: /boot/* 2>/dev/null | grep -q 'ASCII' || \
	parallel -j${threads} "file -F ' '" ::: /boot/* 2>/dev/null | grep -q 'config build file' && \
	CONFIGS="$(grep -H 'Linux/' /boot/* 2>/dev/null | awk '{print $1,$3}')"
	CONFIGS="${CONFIGS//:#/}" && CONFIGS_NOLOCAL="${CONFIGS}" ; eend 0 2>/dev/null
	while read config_file config_ver;do
		local_version "${config_ver}" "${config_file}"
		CONFIGS="$(sed "s|^${config_file} ${config_ver}$|${config_file} ${config_ver}${LOCALVERSION}|" <<< "${CONFIGS}")"
		unset LOCALVERSION
	done <<< "${CONFIGS_NOLOCAL}"
	echo "Maps.......";
	ALL_MAPS="$(ls -1 --color=never /boot/System.map-* 2>/dev/null)" ; eend 0 2>/dev/null
	if ls -d1 /lib/modules/* &>/dev/null;then
		mod_dirs="$(ls -d1 --color=never /lib/modules/*)"
		for i in ${mod_dirs};do
			MODULES+="${i} ${i##*/}"$'\n'
		done
	fi
}
############################################################################
################ kernel path and real name #################################
local_version() {
	local_config="${SRC}-${1}/.config"
	extract="/usr/src/linux/scripts/extract-ikconfig"

	if [[ -f "${extract}" && -f "${2}" ]];then
		prelocal="$("${extract}" "${2}" 2>/dev/null | awk -F '"' '/^CONFIG_LOCALVERSION=/ {print $2}')"
		[[ -n "${prelocal}" ]] && LOCALVERSION="${prelocal}"
	fi

	if [[ -z "${LOCALVERSION}" ]];then
		while read cf cv;do
			if [[ "${cv}" == "${1}" && ! `grep -q '.old' <<< "${cf}"` ]];then
				LOCALVERSION="$(awk -F '"' '/^CONFIG_LOCALVERSION=/ {print $2}' "${cf}")"
				break
			fi
		done <<< "${CONFIGS}"
	fi

	if [[ -z "${LOCALVERSION}" ]];then
		[[ -f "${local_config}" ]] && LOCALVERSION="$(awk -F '"' '/^CONFIG_LOCALVERSION=/ {print $2}' "${local_config}")"
	fi
}

kernel_version() {
	makefile="${SRC}-${1}/Makefile"

	if [[ -f "${makefile}" ]];then
		VERSION="$(awk '/^VERSION =/ {print $3}' "${makefile}")"
		PATCHLEVEL="$(awk '/^PATCHLEVEL =/ {print $3}' "${makefile}")"
		SUBLEVEL="$(awk '/^SUBLEVEL =/ {print $3}' "${makefile}")"
		EXTRAVERSION="$(awk '/^EXTRAVERSION =/ {print $3}' "${makefile}")"
		FULL_KERNEL="${VERSION}.${PATCHLEVEL}.${SUBLEVEL}${EXTRAVERSION}"
	fi
}

true_kernel() {
	if [[ -n "${1}" ]];then
		KERNEL="${1##*linux-}"
		KERNEL="${KERNEL%/}"
	fi

	if [[ -d "${SRC}-${KERNEL}" ]];then
		kernel_version ${KERNEL}
	else
		for kernel in `ls -d --color=never "${SRC}"-*`;do
			kernel="${kernel##*/linux-}"
			kernel_version ${kernel}
			if [[ "${KERNEL}" == "${FULL_KERNEL}" ]];then
				KERNEL="${kernel}"
				break
			fi
		done
	fi
}
############################################################################
################ remove unneeded kernel ####################################
choose_trash(){
	PS3=`echo -e "${contrast}Choose kernel_file for remove:${restore} "`
	select cf in `awk '{print $1}' <<< "${KERNELS}"`;do
		echo -n "${cf}"
		break
	done
}
clean_kernels(){
	trash_files+=" $(choose_trash)"
	for tk in ${trash_files};do
		KERNELS="$(sed -e "s|^${tk} .*$||" -e '/^$/d' <<< "${KERNELS}")"
	done
}
rm_trash(){
	[[ "$(echo "${KERNELS}" | wc -l)" == "1" ]] && return 0;
	echo -e "\n${contrast}Exists kernels:${restore}\n"
	echo -e "\n${KERNELS}" | column -t
	echo -ne "\n${contrast}Would you like remove some kernels?${restore} [${green}Yes${restore}/${red}No${restore}] "
	while read x;do
		case ${x} in
			Yes | YES | yes | Y | y | "" )
				clean_kernels;
				while [[ -z "${enough}" && "$(echo "${KERNELS}" | wc -l)" != "1" ]];do
					echo -ne "${contrast}More?${restore} [${green}Yes${restore}/${red}No${restore}] "
					while read y;do
						case ${y} in
							Yes | YES | yes | Y | y | "" )
								clean_kernels;
								break;;
							No | NO | no | N | n )
								enough="1"
								break;;
							* ) echo -ne "Sorry, response '${y}' not understood. [${green}Yes${restore}/${red}No${restore}] "
								continue;;
						esac
					done
				done
				break;;
			No | NO | no | N | n )
				break;;
			* ) echo -ne "Sorry, response '${x}' not understood. [${green}Yes${restore}/${red}No${restore}] "
				continue;;
		esac
	done
	FORCE+=" ${trash_files}"
}
############################################################################
################ boot ######################################################
check_boot(){
	while read file version;do
		true_kernel ${version}
		unset STOP
		#### ignore ####
		if [[ -n "${FULL_IGNORE/ /}" ]];then
			for ignored in ${FULL_IGNORE};do
				if [[ "${ignored}" == "${file}" ]];then
					#### initrams ####
					while read ram_file ram_ver;do
						if [[ "${version}" == "${ram_ver}" ]];then
							IGNORED+=" ${ram_file}"
						fi
					done <<< "${INITRAMS_FULL}"

					#### configs ####
					while read conf_file conf_version;do
						if [[ "${version}" == "${conf_version}" ]];then
							IGNORED+=" ${conf_file}"
						fi
					done <<< "${CONFIGS}"

					#### maps #######
					while read imap_file;do
						itrash="${imap_file%%${version}}"
						imap_version="${imap_file##${itrash}}"
						if [[ "${version}" == "${imap_version}" ]];then
							IGNORED+=" ${imap_file}"
						fi
					done <<< "${ALL_MAPS}"

					#### modules ####
					if [[ -d "/lib/modules/${version}" ]];then
						IGNORED+=" /lib/modules/${version}"
					fi
				else
					real_check;
				fi
			done
		else
			real_check;
		fi
	done <<< "${KERNELS}"
}
############################################################################
################ real_check ################################################
real_check(){
	if [[ ! -f "${SRC}-${KERNEL}/Makefile" && ! -d "/lib/modules/${version}" ]];then
		REMOVE_FILES="${REMOVE_FILES}"$'\n'"${file}"
		#### initrams ####
		while read ram_file ram_ver;do
			if [[ "${version}" == "${ram_ver}" ]];then
				REMOVE_FILES="${REMOVE_FILES}"$'\n'"${ram_file}"
			fi
		done <<< "${INITRAMS_FULL}"

		#### configs #####
		while read conf_file conf_version;do
			if [[ "${version}" == "${conf_version}" ]];then
				REMOVE_FILES="${REMOVE_FILES}"$'\n'"${conf_file}"
			fi
		done <<< "${CONFIGS}"

		#### maps ########
		while read map_file;do
			trash="${map_file%%${version}}"
			map_version="${map_file##${trash}}"
			if [[ "${version}" == "${map_version}" ]];then
				REMOVE_FILES="${REMOVE_FILES}"$'\n'"${map_file}"
			fi
		done <<< "${ALL_MAPS}"

		#### modules #####
		if [[ -d "/lib/modules/${version}" ]];then
			REMOVE_MOD_DIRS="${REMOVE_MOD_DIRS}"$'\n'"/lib/modules/${version}"
		fi
	fi
}
############################################################################
################ initrams ##################################################
initrams(){
	while read initram compressor;do
		if [[ -n "${compressor}" ]];then
			[[ "${compressor}" == "gzip" ]]  && decompressor="zcat"
			[[ "${compressor}" == "bzip2" ]] && decompressor="bzcat"
			[[ "${compressor}" == "lzop" ]]  && decompressor="lzop -c"
			[[ "${compressor}" == "XZ" ]]    && decompressor="xzcat"
			[[ "${compressor}" == "LZMA" ]]  && decompressor="lzcat"
			initram_ver="$("${decompressor}" "${initram}" | strings | awk '/^vermagic=[[:digit:]]/ {print $1}' | sort -u | sed 's|vermagic=||')"
			if [[ -z "${initram_ver}" ]];then
				initram_ver="$("${decompressor}" "${initram}" | strings | grep -o "modules/[[:digit:]].*" | grep -v "modules\." | sed 's|.*/||g')"
			fi
			if [[ -z "${initram_ver}" ]];then
				INITRAMS_FULL="${INITRAMS_FULL}"$'\n'"${initram} unknown"
			else
				INITRAMS_FULL="${INITRAMS_FULL}"$'\n'"${initram} ${initram_ver}"
			fi
		fi
	done <<< "${INITRAMS}"
}
initrams_orphans(){
	ORPHANS="${INITRAMS_FULL}"
	while read kernel_file kernel_ver;do
		while read orphan_file orphan_ver;do
			if [[ "${kernel_ver}" == "${orphan_ver}" ]];then
				ORPHANS="${ORPHANS/"${orphan_file} ${orphan_ver}"/}"
			fi
		done <<< "${INITRAMS_FULL}"
	done <<< "${KERNELS}"
	ORPHANS="$( echo -e "${ORPHANS}" | awk '{print $1}' )"
	REMOVE_FILES="${REMOVE_FILES}"$'\n'"${ORPHANS}"
}
############################################################################
################ configs ###################################################
orphan_configs(){
	CONFIGS_ORPHANS="${CONFIGS}"
	while read config conf_ver;do
		while read kernel_file kernel_ver;do
			if [[ "${kernel_ver}" == "${conf_ver}" ]];then
				CONFIGS_ORPHANS="${CONFIGS_ORPHANS//"${config} ${conf_ver}"/}"
			fi
		done <<< "${KERNELS}"
	done <<< "${CONFIGS}"
	CONFIGS_ORPHANS="$( awk '{print $1}' <<< "${CONFIGS_ORPHANS}" )"
	REMOVE_FILES="${REMOVE_FILES}"$'\n'"${CONFIGS_ORPHANS}"
}
############################################################################
################ System.map ################################################
orphan_maps(){
	MAPS_ORPHANS="${ALL_MAPS}"
	while read m_file;do
		while read k_file k_ver;do
			trash="${m_file%%${k_ver}}"
			m_ver="${m_file##${trash}}"
			if [[ "${k_ver}" == "${m_ver}" ]];then
				MAPS_ORPHANS="${MAPS_ORPHANS/"${m_file}"*/}"
			fi
		done <<< "${KERNELS}"
	done <<< "${ALL_MAPS}"
	MAPS_ORPHANS="$( awk '{print $1}' <<< "${MAPS_ORPHANS}" )"
	REMOVE_FILES="${REMOVE_FILES}"$'\n'"${MAPS_ORPHANS}"
}
############################################################################
################ modules ###################################################
check_mod(){
	VERSIONS="$( echo -e "${KERNELS}" | awk '{print $2}' | uniq )"
	MOD_DIRS="$(ls -1 --color=never /lib/modules/)"
	TRASH_DIR="${MOD_DIRS}"
	while read mod_dir;do
		while read ver;do
			[[ "${mod_dir}" == "${ver}" ]] && GOOD_MOD+="${mod_dir} "
		done <<< "${VERSIONS}"
	done <<< "${MOD_DIRS}"
	for moddir in ${GOOD_MOD};do
		MOD_DIRS="${MOD_DIRS/"${moddir}"/}"
	done
	while read md;do
		[[ -n "${md}" && -d "/lib/modules/${md}" ]] && TRASH_MOD_DIRS="${TRASH_MOD_DIRS}"$'\n'"/lib/modules/${md}"
	done <<< "${MOD_DIRS}"
	REMOVE_MOD_DIRS="${REMOVE_MOD_DIRS}"$'\n'"${TRASH_MOD_DIRS}"
}
############################################################################
################ sources ###################################################
check_src(){
	for src_dir in `ls -d1 --color=never ${SRC}-* 2>/dev/null`;do
		parent_pkg="$(grep -m1 "dir ${src_dir}" ${PKGDB}/sys-kernel/*/CONTENTS | cut -d\/ -f5,6)"
		if grep -q "${parent_pkg}" <<< "${ORPHAN_PKG}";then
			REMOVE_DIRS="${REMOVE_DIRS}"$'\n'"${src_dir}"
		elif [[ ! -f "${src_dir}/Makefile" ]];then
			REMOVE_DIRS="${REMOVE_DIRS}"$'\n'"${src_dir}"
		fi
	done
}
############################################################################
################ packages ##################################################
pkg_orphans(){
	used_kernels="$(awk '{print $2}' <<< "${KERNELS}")"
	if `ls -d1 ${SRC}-* &>/dev/null`;then
		while read dir;do
			if [[ -f "${dir}/Makefile" ]];then
				true_kernel "${dir}"
				local_version "${FULL_KERNEL}"
				if [[ -z "${LOCALVERSION}" ]];then
					a_sources+="${dir} ${FULL_KERNEL}"$'\n'
				else
					a_sources+="${dir} ${FULL_KERNEL}${LOCALVERSION}"$'\n'
				fi
				unset FULL_KERNEL LOCALVERSION
			fi
		done <<< "$(ls -d1 --color=never ${SRC}-*)"
	fi
	all_sources="$(awk '{print $2}' <<< "${a_sources}" | awk '{print $1}')"
	unused_sources="$(grep -v "${used_kernels}" <<< "${all_sources}")"
	if [[ -n "${unused_sources}" ]];then
		while read u_ver;do
			orphan_dir="$(grep "${u_ver}" <<< "${a_sources}" | awk '{print $1}')"
			ORPHAN_PKG+=" =$(grep -m1 "dir ${orphan_dir}" ${PKGDB}/sys-kernel/*/CONTENTS | cut -d\/ -f5,6)"
			UNUSED_SOURCES+="${orphan_dir}"$'\n'
		done <<< "${unused_sources}"
	fi
}
############################################################################
################ ignore/force trash ########################################
version_ignore(){
	all_trash="$(echo -e "${KERNELS}\n${INITRAMS}\n${CONFIGS}\n${SOURCES}\n${BROKEN_SOURCES}\n${PACKAGES}\n${MODULES}"\
	| grep " ${1}$" | awk '{print $1}')"
	for trash in ${all_trash};do
		if [[ -f "${trash}" ]];then
			if ! grep -q "^${trash}$" <<< "${ALREADY_IGNORED}";then
				echo -e "${green}Ignoring file:${restore}\t\t${trash}"
				REMOVE_FILES="${REMOVE_FILES/"${trash}"/}"
				ALREADY_IGNORED+="${trash}"$'\n'
			fi
		elif [[ -d "${trash}" ]];then
			if ! grep -q "^${trash}$" <<< "${ALREADY_IGNORED}";then
				echo -e "${green}Ignoring directory:${restore}\t${trash}"
				REMOVE_DIRS="${REMOVE_DIRS/"${trash}"/}"
				UNUSED_SOURCES="${UNUSED_SOURCES/"${trash}"/}"
				REMOVE_MOD_DIRS="${REMOVE_MOD_DIRS/"${trash}"/}"
				ALREADY_IGNORED+="${trash}"$'\n'
			fi
		elif grep -q "^${trash} " <<< "${PACKAGES}" && [[ -d "${PKGDB}/${trash}" ]];then
			if ! grep -q "^${trash}$" <<< "${ALREADY_IGNORED}";then
				echo -e "${green}Ignoring package:${restore}\t${trash}"
				ORPHAN_PKG="${ORPHAN_PKG/" =${trash}"/}"
				ALREADY_IGNORED+="${trash}"$'\n'
			fi
			pkg_src="$(grep -m1 "dir /usr/src/linux-.*" "${PKGDB}/${trash}/CONTENTS" | awk '{print $2}')"
			if ! grep -q "^${pkg_src}$" <<< "${ALREADY_IGNORED}";then
				echo -e "${green}Ignoring directory:${restore}\t${pkg_src}"
				REMOVE_DIRS="${REMOVE_DIRS/"${pkg_src}"/}"
				ALREADY_IGNORED+="${pkg_src}"$'\n'
			fi
		fi
	done
}
version_force(){
	all_trash="$(echo -e "${KERNELS}\n${INITRAMS}\n${CONFIGS}\n${SOURCES}\n${BROKEN_SOURCES}\n${PACKAGES}\n${MODULES}"\
	| grep " ${1}$" | awk '{print $1}')"
	for trash in ${all_trash};do
		if [[ -f "${trash}" ]];then
			if ! grep -q "^${trash}$" <<< "${ALREADY_FORCED}";then
				echo -e "${green}Forcing file:${restore}\t\t${trash}"
				REMOVE_FILES+=$'\n'"${trash}"
				ALREADY_FORCED+="${trash}"$'\n'
			fi
		elif [[ -d "${trash}" ]];then
			if ! grep -q "^${trash}$" <<< "${ALREADY_FORCED}";then
				echo -e "${green}Forcing directory:${restore}\t${trash}"
				REMOVE_DIRS+=$'\n'"${trash}"
				REMOVE_MOD_DIRS+=$'\n'"${trash}"
				ALREADY_FORCED+="${trash}"$'\n'
			fi
		elif grep -q "^${trash} " <<< "${PACKAGES}" && [[ -d "${PKGDB}/${trash}" ]];then
			if ! grep -q "^${trash}$" <<< "${ALREADY_FORCED}";then
				echo -e "${green}Forcing package:${restore}\t${trash}"
				ORPHAN_PKG+=$'\n'" =${trash}"
				ALREADY_FORCED+="${trash}"$'\n'
			fi
			pkg_src="$(grep -m1 "dir /usr/src/linux-.*" "${PKGDB}/${trash}/CONTENTS" | awk '{print $2}')"
			if ! grep -q "^${pkg_src}$" <<< "${ALREADY_FORCED}";then
				echo -e "${green}Forcing directory:${restore}\t${pkg_src}"
				REMOVE_DIRS+=$'\n'"${pkg_src}"
				ALREADY_FORCED+="${pkg_src}"$'\n'
			fi
		fi
	done
}
all_pkgs(){
	if [[ -z "${PACKAGES}" ]];then
		if `ls -d1 ${SRC}-* &>/dev/null`;then
			while read dir;do
				true_kernel "${dir}"
				local_version "${FULL_KERNEL}"
				if [[ -n "${LOCALVERSION}" ]];then
					FULL_KERNEL="${FULL_KERNEL}${LOCALVERSION}"
				fi
				if [[ -f "${dir}/Makefile" ]];then
					SOURCES+="${dir} ${FULL_KERNEL}"$'\n'
				else
					BROKEN_SOURCES+="${dir}"$'\n'
				fi
			PACKAGES+="$(grep -m1 "dir ${dir}" ${PKGDB}/sys-kernel/*/CONTENTS | cut -d\/ -f5,6)  ${FULL_KERNEL}"$'\n'
			unset FULL_KERNEL LOCALVERSION
			done <<< "$(ls -d1 --color=never ${SRC}-*)"
		fi
		all_versions="$(echo -e "${KERNELS}\n${INITRAMS}\n${CONFIGS}\n${SOURCES}\n${BROKEN_SOURCES}\n${PACKAGES}\n${MODULES}" | awk '{print $2}' | sort -u)"
	fi
}
################ ignore ####################################################
ignore(){
	all_pkgs;
	for ignor in ${FULL_IGNORE} ${IGNORED};do
		if [[ -f "${ignor}" ]] ;then
			if ! grep -q "^${ignor}$" <<< "${ALREADY_IGNORED}";then
				echo -e "${green}Ignoring file:${restore}\t${ignor}"
				REMOVE_FILES="${REMOVE_FILES/"${ignor}"/}"
				ALREADY_IGNORED+="${ignor}"$'\n'
			fi
		elif [[ -d "${ignor}" ]];then
			if ! grep -q "^${ignor}$" <<< "${ALREADY_IGNORED}";then
				echo -e "${green}Ignoring directory:${restore}\t${ignor}"
				REMOVE_DIRS="${REMOVE_DIRS/"${ignor}"/}"
				UNUSED_SOURCES="${UNUSED_SOURCES/"${ignor}"/}"
				REMOVE_MOD_DIRS="${REMOVE_MOD_DIRS/"${ignor}"/}"
				ALREADY_IGNORED+="${ignor}"$'\n'
			fi
		elif grep -q "^${ignor} " <<< "${PACKAGES}" && [[ -d "${PKGDB}/${ignor}" ]];then
			if ! grep -q "^${ignor}$" <<< "${ALREADY_IGNORED}";then
				echo -e "${green}Ignoring package:${restore}\t${ignor}"
				ORPHAN_PKG="${ORPHAN_PKG/" =${ignor}"/}"
				ALREADY_IGNORED+="${ignor}"$'\n'
			fi
			pkg_src="$(grep -m1 "dir /usr/src/linux-.*" "${PKGDB}/${ignor}/CONTENTS" | awk '{print $2}')"
			pkg_ver="$(grep "^${ignor} " <<< "${PACKAGES}" | awk '{print $2}')"
			if ! grep -q "^${pkg_src}$" <<< "${ALREADY_IGNORED}";then
				echo -e "${green}Ignoring directory:${restore}\t${pkg_src}"
				REMOVE_DIRS="${REMOVE_DIRS/"${pkg_src}"/}"
				ALREADY_IGNORED+="${pkg_src}"$'\n'
			fi
			version_ignore "${pkg_ver}"
		elif grep -q "^sys-kernel/${ignor} " <<< "${PACKAGES}" && [[ -d "${PKGDB}/sys-kernel/${ignor}" ]];then
			if ! grep -q "^sys-kernel/${ignor}$" <<< "${ALREADY_IGNORED}";then
				echo -e "${green}Ignoring package:${restore}\tsys-kernel/${ignor}"
				ORPHAN_PKG="${ORPHAN_PKG/" =sys-kernel/${ignor}"/}"
				ALREADY_IGNORED+="sys-kernel/${ignor}"$'\n'
			fi
			pkg_src="$(grep -m1 "dir /usr/src/linux-.*" "${PKGDB}/sys-kernel/${ignor}/CONTENTS" | awk '{print $2}')"
			pkg_ver="$(grep "^sys-kernel/${ignor} " <<< "${PACKAGES}" | awk '{print $2}')"
			if ! grep -q "^${pkg_src}$" <<< "${ALREADY_IGNORED}";then
				echo -e "${green}Ignoring directory:${restore}\t${pkg_src}"
				REMOVE_DIRS="${REMOVE_DIRS/"${pkg_src}"/}"
				ALREADY_IGNORED+="${pkg_src}"$'\n'
			fi
			version_ignore "${pkg_ver}"
		elif grep -q "^${ignor}$" <<< "${all_versions}";then
			version_ignore "${ignor}"
		else
			[[ "${ignor}" != "unknown" ]] && echo -e "\n${green}>>> ${red}${ignor} ${green}<<<${restore} o_O???\n"
		fi
	done
	unset ALREADY_IGNORED
}
################ force #####################################################
force(){
	all_pkgs;
	for force in ${FORCE};do
		if [[ -f "${force}" ]] ;then
			if ! grep -q "^${force}$" <<< "${ALREADY_FORCED}";then
				echo -e "${green}Forcing file:${restore}\t\t${force}"
				REMOVE_FILES+=$'\n'"${force}"
				ALREADY_FORCED+="${force}"$'\n'
			fi
		elif [[ -d "${force}" ]];then
			if ! grep -q "^${force}$" <<< "${ALREADY_FORCED}";then
				echo -e "${green}Forcing directory:${restore}\t${force}"
				REMOVE_DIRS+=$'\n'"${force}"
				REMOVE_MOD_DIRS+=$'\n'"${force}"
				ALREADY_FORCED+="${force}"$'\n'
			fi
		elif grep -q "^${force} " <<< "${PACKAGES}" && [[ -d "${PKGDB}/${force}" ]];then
			if ! grep -q "^${force}$" <<< "${ALREADY_FORCED}";then
				echo -e "${green}Forcing package:${restore}\t${force}"
				ORPHAN_PKG+=$'\n'" =${force}"
				ALREADY_FORCED+="${force}"$'\n'
			fi
			pkg_src="$(grep -m1 "dir /usr/src/linux-.*" "${PKGDB}/${force}/CONTENTS" | awk '{print $2}')"
			pkg_ver="$(grep "^${force} " <<< "${PACKAGES}" | awk '{print $2}')"
			if ! grep -q "^${pkg_src}$" <<< "${ALREADY_FORCED}";then
				echo -e "${green}Forcing directory:${restore}\t${pkg_src}"
				REMOVE_DIRS+=$'\n'"${pkg_src}"
				ALREADY_FORCED+="${pkg_src}"$'\n'
			fi
			version_force "${pkg_ver}"
		elif grep -q "^sys-kernel/${force} " <<< "${PACKAGES}" && [[ -d "${PKGDB}/sys-kernel/${force}" ]];then
			if ! grep -q "^sys-kernel/${force}$" <<< "${ALREADY_FORCED}";then
				echo -e "${green}Forcing package:${restore}\tsys-kernel/${force}"
				ORPHAN_PKG+=$'\n'" =sys-kernel/${force}"
				ALREADY_FORCED+="sys-kernel/${force}"$'\n'
			fi
			pkg_src="$(grep -m1 "dir /usr/src/linux-.*" "${PKGDB}/sys-kernel/${force}/CONTENTS" | awk '{print $2}')"
			pkg_ver="$(grep "^sys-kernel/${force} " <<< "${PACKAGES}" | awk '{print $2}')"
			if ! grep -q "^${pkg_src}$" <<< "${ALREADY_FORCED}";then
				echo -e "${green}Forcing directory:${restore}\t${pkg_src}"
				REMOVE_DIRS+=$'\n'"${pkg_src}"
				ALREADY_FORCED+="${pkg_src}"$'\n'
			fi
			version_force "${pkg_ver}"
		elif grep -q "^${force}$" <<< "${all_versions}";then
			version_force "${force}"
		else
			echo -e "\n${green}>>> ${red}${force} ${green}<<<${restore} o_O???\n"
		fi
	done
	unset ALREADY_FORCED
}
############################################################################
################ status ####################################################
status(){
	REMOVE_FILES="$(echo -e "${REMOVE_FILES}" | sort -u | sed '/^$/d')"
	REMOVE_DIRS="$(echo -e "${REMOVE_DIRS}" | sort -u | sed '/^$/d')"
	REMOVE_MOD_DIRS="$(echo -e "${REMOVE_MOD_DIRS}" | sort -u | sed '/^$/d')"
	PKG="$(tr -d "=" <<< "${ORPHAN_PKG# }" | sed '/^[ \t]$/d')"
	if [[ -n "${REMOVE_FILES}" ]] || [[ -n "${REMOVE_DIRS}" ]] || [[ -n "${REMOVE_MOD_DIRS}" ]] || [[ -n "${PKG}" ]];then
		if [[ -n "${REMOVE_FILES}" ]];then
			echo -e "\n${green}Next files will be removed:${restore}"
			echo -e "${REMOVE_FILES}" | sed '/^$/d' | sort -u
			echo
		fi

		if [[ -n "${REMOVE_DIRS}" ]] || [[ -n "${REMOVE_MOD_DIRS}" ]];then
			echo -e "\n${green}Next directories will be removed:${restore}"
			echo -e "${REMOVE_DIRS}"$'\n'"${REMOVE_MOD_DIRS}" | sed '/^$/d' | sort -u
			echo
		fi

		if [[ -n "${PKG}" ]];then
			echo -e "\n${green}Next packages will be removed:${restore}"
			echo "${PKG}" | tr " " $'\n' | sed '/^$/d' | sort -u
			echo
		fi
	else
		echo -e "\n${green}Who's here? o_O${restore}\n"
	fi
}
############################################################################
################ remove ####################################################
remove(){
	if [[ -n "${REMOVE_FILES}" || -n "${REMOVE_DIRS}" || -n "${REMOVE_MOD_DIRS}" || -n "${PKG}" ]];then
		tput sc
		echo -ne "${green}Counting files...${restore}"
		total_files="$(find ${REMOVE_FILES//\\n/ } ${REMOVE_DIRS//\\n/ } ${REMOVE_MOD_DIRS//\\n/ } -type f | wc -l )"
		tput rc
		echo -e "${green}total files:${restore} ${total_files}           "
		tput sc
		echo -ne "${green}Calculating space...${restore}"
		total_space="$(du -shc ${REMOVE_FILES//\\n/ } ${REMOVE_DIRS//\\n/ } ${REMOVE_MOD_DIRS//\\n/ } | tail -n1 | awk '{print $1}')"
		tput rc
		echo -e "${green}total space:${restore} ${total_space}           "
		echo -ne "${contrast}Would you like to remove this trash?${restore} [${green}Yes${restore}/${red}No${restore}] ";
		while read x;do
			case ${x} in
				Yes | YES | yes | Y | y | "" )
					echo -e "\n${green}Removing...${restore}"
					[[ -n "${REMOVE_FILES}" ]] && rm -f  ${REMOVE_FILES//\\n/ }
					[[ -n "${ORPHAN_PKG//=/}" ]] && emerge -C ${ORPHAN_PKG}
					[[ -n "${REMOVE_DIRS}" ]] && rm -r ${REMOVE_DIRS//\\n/ }
					[[ -n "${REMOVE_MOD_DIRS}" ]] && rm -r ${REMOVE_MOD_DIRS//\\n/ }
					eend 0 2>/dev/null
					echo -e "\n[ ${green}${total_space}${restore} ] Total space from ${green}${total_files}${restore} files were freed.\n"
					exit 0;;
				No | NO | no | N | n )
					exit 0;;
				* ) echo -ne "Sorry, response '${x}' not understood. [${green}Yes${restore}/${red}No${restore}] "
					continue;;
			esac
		done
	fi
}
############################################################################
################ list ######################################################
list(){
	echo -e "$(
		initrams;
		[[ -n "${KERNELS}" ]] && echo -e "${green}Kernels:${restore}\n" "${KERNELS}"
		[[ -n "${INITRAMS}" ]] && echo -e "${green}Initrams:${restore}\n" "${INITRAMS_FULL}"
		[[ -n "${CONFIGS}" ]] && echo -e "${green}Configs:${restore}\n" "${CONFIGS}"
		[[ -n "${ALL_MAPS}" ]] && echo -e "${green}Maps:${restore}\n" "${ALL_MAPS}"
		[[ -n "${MODULES}" ]] && echo -e "${green}Modules:${restore}\n" "${MODULES}"

		if `ls -d1 ${SRC}-* &>/dev/null`;then
			while read dir;do
				true_kernel "${dir}"
				local_version "${FULL_KERNEL}"
				if [[ -n "${LOCALVERSION}" ]];then
					FULL_KERNEL="${FULL_KERNEL}${LOCALVERSION}"
				fi
				if [[ -f "${dir}/Makefile" ]];then
					SOURCES+="${dir} ${FULL_KERNEL}\n"
				else
					BROKEN_SOURCES+="${dir}\n"
				fi
			PACKAGES+="$(grep -m1 "dir ${dir}" ${PKGDB}/sys-kernel/*/CONTENTS | cut -d\/ -f5,6)  ${FULL_KERNEL}\n"
			unset FULL_KERNEL LOCALVERSION
			done <<< "$(ls -d1 --color=never ${SRC}-*)"
			[[ -n "${SOURCES}" ]] && echo -e "\n${green}Sources:${restore}\n${SOURCES%\\n}"
			[[ -n "${BROKEN_SOURCES}" ]] && echo -e "\n${green}Broken_sources:${restore}\n${BROKEN_SOURCES%\\n}"
			[[ -n "${PACKAGES}" ]] && echo -e "\n${green}Packages:${restore}\n${PACKAGES%\\n}"
		fi
		[[ -n "${ORPHAN_PKG}" ]] && echo -e "${green}Unused_packages:${restore}\n `tr ' ' $'\n' <<< "${ORPHAN_PKG//=/}"`"
		echo
	)" | column -t
}
############################################################################
################ help ######################################################
help_kc(){
  echo -e \
"kernel-cleaner: ${MY_VERSION}

Usage: kernel-cleaner [OPTION] [ [CUSTOM] [TARGET] ]
available OPTIONS:
--run/-r/r:      Check and remove broken kernels/sources/modules/initrams/configs/maps.
--list/-l/l:     List of a founded kernels/sources/modules/initrams/configs/maps.
--pretend/-p/p:  Check only. Nothing remove.
--version/-v/v:  Display version.
--help/-h/-?/h/: This help.

CUSTOM can be one of:
--ignore [TARGETS]:  Don't remove TARGETS.( or pass TARGETS in the /etc/kernel-cleaner.conf )
--force  [TARGETS]:  Forcing remove TARGETS.

TARGETS can be one of:
[FILE]:    example '/boot/vmlinuz-X.Y.Z'
[PATH]:    example '/usr/src/linux-3.5.6-pf/'
[VERSION]: example '3.10.0-pf' (like \`uname -r\` output)
[PACKAGE]: example 'pf-sources-3.10.0' or 'sys-kernel/pf-sources-3.10.0'

TARGETS must be separated by SPACE."
}
############################################################################
################ lets go! ##################################################
case ${1} in
--list | list | -l | l )
	init;
	pkg_orphans;
	list;
	exit 0;;
--pretend | pretend | -p | p )
	init;
	rm_trash;
	initrams;
	check_boot;
	initrams_orphans;
	orphan_configs;
	orphan_maps;
	pkg_orphans
	check_mod;
	check_src;
	ignore;
	force;
	status;
	exit 0;;
--run | run | -r | r )
	init;
	rm_trash;
	initrams;
	check_boot;
	initrams_orphans;
	orphan_configs;
	orphan_maps;
	pkg_orphans
	check_mod;
	check_src;
	ignore;
	force;
	status;
	remove;
	exit 0;;
--version | version | -v | v )
	echo -e "kernel-cleaner: ${contrast}${MY_VERSION}${restore}";
	exit 0;;
--help | help | -h | -? | h | * )
	help_kc;
	exit 0;;
esac
